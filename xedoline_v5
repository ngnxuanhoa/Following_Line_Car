#include <Servo.h>

// IR Sensors
int inPin[4] = {5, 4, 3, 2};

int sensor[4] = {0, 0, 0, 0};
int vt[2]={0,69};
int vt_back;
//long last_vt;

int ENA = 6;
int motorInput1 = 7;
int motorInput2 = 8;
int motorInput3 = 9;
int motorInput4 = 10;
int ENB = 11;

//Initial Speed of Motor
int initial_motor_speed = 110;
int l_speed = 25;

const int trig = A5;
const int echo = A4;

Servo myservo;
int sv_pin = 12;

void setup() {
  Serial.begin(9600);
  for(int i =0; i<5; i++){
   pinMode(inPin[i], INPUT);
  }

  pinMode(motorInput1, OUTPUT);
  pinMode(motorInput2, OUTPUT);
  pinMode(motorInput3, OUTPUT);
  pinMode(motorInput4, OUTPUT);

  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);

  myservo.attach(sv_pin);
  myservo.write(90);
}

void loop() {
read_sensor();

if(vt[0]!=vt[1]){
   
  vt[1] = vt[0];
  do{
  stop_r();
  }while (vk_front());
  
  if (vt[0] ==0) 
  {
    forward();
  }
  if (vt[0] ==-1) 
  {
    right(25);
  }
  if (vt[0] ==1) 
  {
    left(25);
  }
  if (vt[0] ==2) 
  {
    left(50);
  }
  if (vt[0] ==-2) 
  {
    right(50);
  }
  if (vt[0] ==-3) 
  {
    do{
      read_sensor_();
      goRight();
      delay(10);
    }while(vt_back != 101);
  }
  if (vt[0] ==3) 
  {
    do{
      read_sensor_();
      goLeft();
      delay(10);
    }while(vt_back != 101);
  }
  if (vt[0] ==111) 
  {
    forward();
  }
  if (vt[0] ==101) 
  {
    stop_r();
  }
  if (vt[0] ==100) 
  {
    int deLay =0;
      do{
        deLay++;
        read_sensor_();
        goRight();
        delay(10);
      }while(vt_back == 100 && deLay <= 500);
  }
  }    
  else {
    //Serial.println(vt[1]);
    if(vt[0]==100){
        if (vk_front()) {
        stop_r();
        int vk = check_LR();
          if (vk == -1) {
          reverse();
          delay(100);
          goRight();
          //delay(100);
        }
        else if (vk == 1) {
          reverse();
          delay(100);
          goLeft();
          //delay(100);
        }
        myservo.write(90);
        delay(500);
      }
      else forward();
    }
  }
}
void read_sensor_()
{
  for(int i =0; i<5; i++){
    sensor[i] = digitalRead(inPin[i]);
  }
  if ((sensor[0] == 0) && (sensor[3] == 0) && (sensor[1] == 0) && (sensor[2] == 0))
    vt_back = 100;
  else if ((sensor[0] == 0) && (sensor[3] == 0) && (sensor[1] == 0) && (sensor[2] == 1))
    vt_back = 101;
  else if ((sensor[0] == 0) && (sensor[3] == 0) && (sensor[1] == 1) && (sensor[2] == 0))
    vt_back = 101;
  else if ((sensor[0] == 0) && (sensor[3] == 0) && (sensor[1] == 1) && (sensor[2] == 1))
    vt_back = 101;
  else if ((sensor[0] == 0) && (sensor[3] == 0) && (sensor[1] == 1) && (sensor[2] == 1))
    vt_back = 111;
  else vt_back = 114;
}
void read_sensor()
{
  for(int i =0; i<5; i++){
    sensor[i] = digitalRead(inPin[i]);
  }
  
  if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1))
    vt[0] = -2;
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 0))
    vt[0] = -1;
  else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0))
    vt[0] = 0;
  else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0))
    vt[0] = 1;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0))
    vt[0] = 2;
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1))
    vt[0] = -3;
  else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1))
    vt[0] = -3;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0))
    vt[0] = 3;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0))
    vt[0] = 3;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1))
    vt[0] = 111;
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0))
    vt[0] = 100;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1))
    vt[0] = 101;
}
void forward()
{
  analogWrite(ENA, initial_motor_speed); //Left Motor Speed
  analogWrite(ENB, initial_motor_speed); //Right Motor Speed
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
void goRight() {
  analogWrite(ENA, initial_motor_speed); //Left Motor Speed
  analogWrite(ENB, initial_motor_speed); //Right Motor Speed
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
  
}
void goLeft() {
  analogWrite(ENA, initial_motor_speed); //Left Motor Speed
  analogWrite(ENB, initial_motor_speed); //Right Motor Speed
  digitalWrite(motorInput1, HIGH);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
void stop_r()
{
  analogWrite(ENA, 0); //Left Motor Speed
  analogWrite(ENB, 0); //Right Motor Speed
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, LOW);
}

void reverse()
{
  analogWrite(ENA, initial_motor_speed); //Left Motor Speed
  analogWrite(ENB, initial_motor_speed); //Right Motor Speed
  digitalWrite(motorInput1, HIGH);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void right(int t_speed)
{
  analogWrite(ENA, initial_motor_speed + t_speed);            //Left Motor Speed
  analogWrite(ENB, initial_motor_speed - t_speed);  //Right Motor Speed
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
void left(int t_speed)
{
  analogWrite(ENA, initial_motor_speed - t_speed);            //Left Motor Speed
  analogWrite(ENB, initial_motor_speed + t_speed);  //Right Motor Speed
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
float distance()
{
  unsigned long duration;

  digitalWrite(trig, 0);
  delayMicroseconds(2);
  digitalWrite(trig, 1);
  delayMicroseconds(5);
  digitalWrite(trig, 0);

  duration = pulseIn(echo, HIGH);

  return float(duration / 2 / 29.412);
}
boolean vk_front()
{
  myservo.write(90);
  float kc = distance();
  if (kc < 25) {
    return true;
  }
  return false;
  //Serial.println(kc);
}
int check_LR()
{
    myservo.write(15);
    delay(200);
    float kcP = distance();
    myservo.write(175);
    delay(200);
    float kcT = distance();
    float kcTP = kcT - kcP;
    if(kcTP<0){
      return -1;
    }
    return 1;
  delay(1000);
  //Serial.println(kcTP);
}
